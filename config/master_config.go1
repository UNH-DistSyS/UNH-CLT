package config

import (
	"encoding/json"
	"os"

	"github.com/google/uuid"

	"github.com/UNH-DistSyS/UNH-CLT/log"
)

// default values
const (
	MPORT      = 1735
	MADDR      = "tcp://127.0.0.1:"
	THINK_TIME = 1000
	DELAY      = false
)

/*******************************************************************************
* Hardcoded definitions of some system-level KV-tables
* 1: Tables table - lists IDs and names of tables
* 2: ConflictDomains table - list of all ConflictDomainKeys stored on the node.
********************************************************************************/
var LocusDBTablesUUID, _ = uuid.Parse("241aa2a0-b730-11ea-aca5-bd0d82bb57cd")
var LocusDBTablesTableName = "locus_tables"

var LocusDBConflictDomainsTableUUID, _ = uuid.Parse("7973fbcc-e2d5-4334-bdc5-06e5a7bcabce")
var LocusDBConflictDomainsTableName = "locus_cds"

/**
 * Represents the configuration of the entire node.
 */

type Config struct {
	NumNodes             int    `json:"num_of_nodes"`   // The number of Nodes.
	MasterAddr           string `json:"master_address"` // The addres of Master
	MasterPort           int    `json:"master_port"`    // the port of master
	NodeThinkTimeus      int    `json:"node_thinktime_µs"`
	DelayMode            bool   `json:"delay_mode"`
	NodeProcessingTimeus int    `json:"wait_time_before_reply_µs"`
}

func MakeDefaultConfig() *Config {
	config := new(Config)
	config.NumNodes = 3
	config.MasterAddr = MADDR
	config.MasterPort = MPORT
	config.NodeThinkTimeus = THINK_TIME
	config.DelayMode = DELAY
	config.NodeProcessingTimeus = 0
	return config
}

func LoadConfigFromFile(configFile string) *Config {
	// start from default, make sure nothing is missed
	cfg := MakeDefaultConfig()
	err := cfg.load(configFile)
	if err != nil {
		log.Fatal(err)
		return nil
	}
	// id can be specified in flag if left blank in config
	return cfg
}

// String is implemented to print the config
func (c *Config) String() string {
	config, err := json.Marshal(c)
	if err != nil {
		log.Errorln(err)
	}
	return string(config)
}

// load configurations from config file in JSON format
func (c *Config) load(configFile string) error {
	file, err := os.Open(configFile)
	if err != nil {
		return err
	}
	decoder := json.NewDecoder(file)
	err = decoder.Decode(c)
	if err != nil {
		return err
	}

	return nil
}

// Save save configurations to file in JSON format
func (c *Config) Save(configFile string) error {
	file, err := os.Create(configFile)
	if err != nil {
		return err
	}
	encoder := json.NewEncoder(file)
	return encoder.Encode(c)
}
